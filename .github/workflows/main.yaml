name: "Build and deploy aap-kalkulator to prod"
on:
  push:
    branches:
      - "main"
    paths-ignore:
      - '**.md'
env:
    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    APP: aap-kalkulator-frontend
    SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    IMAGE_BASE: ghcr.io/${{ github.repository }}
jobs:        
  build:
        name: Bygg og publiser Docker image
        runs-on: ubuntu-latest
        permissions:
          contents: 'read'
          id-token: 'write'
          packages: 'write'
        outputs:
          image: ${{ steps.bygg.outputs.image }}
        steps:
            - uses: "actions/checkout@v3"
            - uses: "actions/setup-node@v3"
              with:
                node-version: "16"
                registry-url: "https://npm.pkg.github.com"
            - name: "install dependencies"
              run: "npm ci"
              env:
                NODE_AUTH_TOKEN: "${{ secrets.READER_TOKEN }}"
              
            - name: test application
              run: npm test
              
            - name: hent tidsstempel
              run: echo "NEXT_PUBLIC_LAST_UPDATED=$(date +%m-%d-%Y)" > .env.local
              
            - name: Setter tag-navn
              run: echo "TAG=$(date +%m-%d-%Y)-$(echo $GITHUB_SHA | cut -c1-7)" >> $GITHUB_ENV
              
            - name: Setter image-navn
              run: echo "IMAGE=$(echo $IMAGE_BASE):$(echo $TAG)" >> $GITHUB_ENV
              
            - name: Bygg applikasjon
              id: bygg
              run: | 
                echo "image=${{ env.IMAGE }}" >> $GITHUB_OUTPUT
                npm run build

            - name: upload to CDN
              uses: navikt/frontend/actions/cdn-upload/v1@main
              with:
                cdn-team-name: aap
                source: ./.next/static
                destination: '/aap-kalkulator-frontend/_next'
                    
            - name: Docker login
              run:  echo ${GITHUB_TOKEN} | docker login ghcr.io --username ${GITHUB_REPOSITORY} --password-stdin
                  
            - name: Bygg og publiser docker image
              run: |
                  docker build . -t ${IMAGE}
                  docker push ${IMAGE}
  "functionalTests":
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: "build"
    services:
      kalkulator:
        image: ${{needs.build.outputs.image}}
        ports:
          - 3000:3000
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          registry-url: "https://npm.pkg.github.com"
          cache: "npm"
      - name: Install dependencies
        run: npm install
        env:
          NODE_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run Playwright tests
        run: npx playwright test
      - uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  deploy:
        strategy:
          matrix:
            cluster: [ dev-gcp, prod-gcp ]
        name: Deploy til ${{matrix.cluster}}
        needs: [functionalTests, build]
        runs-on: ubuntu-latest
        env:
          PRINT_PAYLOAD: true
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          RESOURCE: nais.yaml
          CLUSTER: ${{matrix.cluster}}
          VARS: .nais/${{matrix.cluster}}.yaml
          IMAGE: ${{needs.build.outputs.image}}
        steps:
          - uses: actions/checkout@v3
          - uses: nais/deploy/actions/deploy@master
           

